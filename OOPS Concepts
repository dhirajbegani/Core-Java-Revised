# OOPS Concepts 
1. Encapsulation (IS-A/HAS-A)
Encapsulation helps hide implementation behind an interface (or API).
Encapsulated code has two features:
       Instance variables are kept protected (usually with the private modifier).
       Getter and setter methods provide access to instance variables.
IS-A refers to inheritance or implementation.
IS-A is expressed with the keyword extends.
IS-A, "inherits from," and "is a subtype of " are all equivalent expressions.
HAS-A means an instance of one class "has a" reference to an instance of another class or another instance of the same class.

Encapsulation is all about wrapping variables and methods in one single unit. 
Data Hiding.

2.Abstraction
Abstraction is a process of hiding the implementation details from the user, only the functionality will be provided to the user.
In other words, the user will have the information on what the object does instead of how it does it.

3. Inheritance
Inheritance allows a class to be a subclass of a superclass, and thereby inherit public and protected variables and methods of the superclass.
Inheritance is a key concept that underlies IS-A, polymorphism, overriding, overloading, and casting.
All classes (except class Object), are subclasses of type Object, and therefore they inherit Object's methods.

4. Polymorphism
Polymorphism means "many forms."
A reference variable is always of a single, unchangeable type, but it can refer to a subtype object.
A single object can be referred to by reference variables of many different types —as long as they are the same type or a supertype of the object.
The reference variable's type (not the object's type), determines which methods can be called.
Polymorphic method invocations apply only to overridden instance methods.



Overriding and Overloading
Methods can be overridden or overloaded; constructors can be overloaded but not overridden.

Abstract methods must be overridden by the first concrete (non-abstract) subclass.
Overriding Methods
 Must have the same return type, except that as of Java 5, the return type can be a subclass—this is known as a covariant return.
 Must not have a more restrictive access modifier.
 May have a less restrictive access modifier.
 Must not throw new or broader checked exceptions.
 May throw fewer or narrower checked exceptions, or any unchecked exception.
 final methods cannot be overridden.
 Only inherited methods may be overridden, and remember that private methods are not inherited.
 A subclass uses super.overriddenMethodName() to call the superclass version of an overridden method.

Overloading means reusing a method name, but with different arguments.
Overloaded methods
 Must have different argument lists
 May have different return types, if argument lists are also different
 May have different access modifiers
 May throw different exceptions
 Methods from a superclass can be overloaded in a subclass.
 Polymorphism applies to overriding, not to overloading.
 Object type (not the reference variable's type), determines which overridden method is used at runtime.
 Reference type determines which overloaded method will be used at compile time.

Coupling and Cohesion
 Coupling refers to the degree to which one class knows about or uses members of another class.
  Loose coupling is the desirable state of having classes that are well encapsulated, minimize references to each other, and limit the breadth of API usage.
  Tight coupling is the undesirable state of having classes that break the rules of loose coupling.

Cohesion refers to the degree in which a class has a single, well-defined role or responsibility.
  High cohesion is the desirable state of a class whose members support a single, well-focused role or responsibility.
  Low cohesion is the undesirable state of a class whose members support multiple, unfocused roles or responsibilities.
